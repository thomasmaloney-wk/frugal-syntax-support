{
  "name": "Frugal",
  "scopeName": "source.frugal",
  "fileTypes": [
    "frugal"
  ],
  "uuid": "fa326c5c-81c5-49e6-8d4a-6a7555781b33",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "name": "meta.include.frugal",
      "match": "(?<!\\S)(include)(?!\\S)(?:\\s+((['\"])(?>.*?(\\3))))?",
      "captures": {
        "1": {
          "name": "keyword.other.include.frugal"
        },
        "2": {
          "name": "string.quoted.frugal"
        },
        "3": {
          "name": "punctuation.definition.string.begin.frugal"
        },
        "4": {
          "name": "punctuation.definition.string.end.frugal"
        }
      }
    },
    {
      "name": "meta.cpp-include.frugal",
      "match": "(?<!\\S)(cpp_include)(?!\\S)(?:\\s+((['\"])(?>.*?(\\3))))?",
      "captures": {
        "1": {
          "name": "keyword.other.cpp-include.frugal"
        },
        "2": {
          "name": "string.quoted.frugal"
        },
        "3": {
          "name": "punctuation.definition.string.begin.frugal"
        },
        "4": {
          "name": "punctuation.definition.string.end.frugal"
        }
      }
    },
    {
      "name": "meta.namespace.frugal",
      "match": "(?<!\\S)(namespace)(?!\\S)(?:\\s+([a-zA-Z_][\\w.]*)(?:\\s+([a-zA-Z_][\\w.]*))?)?",
      "captures": {
        "1": {
          "name": "keyword.other.namespace.frugal"
        },
        "2": {
          "name": "support.other.namespace-language.frugal"
        },
        "3": {
          "name": "variable.other.namespace.frugal"
        }
      }
    },
    {
      "name": "meta.namespace.frugal",
      "match": "(?<!\\S)((?:php|xsd)_namespace)(?!\\S)(?:\\s+([a-zA-Z_][\\w.]*))?",
      "captures": {
        "1": {
          "name": "keyword.other.namespace.frugal"
        },
        "2": {
          "name": "variable.other.namespace.frugal"
        }
      }
    },
    {
      "match": "(?<!\\S)((?:cpp|ruby|csharp)_namespace|py_module|(?:java|perl)_package|smalltalk_(?:category|prefix)|cocoa_prefix)(?!\\S)(?:\\s+([a-zA-Z_][\\w.]*))?",
      "captures": {
        "1": {
          "name": "invalid.deprecated.namespace.frugal"
        },
        "2": {
          "name": "variable.other.namespace.frugal"
        }
      }
    },
    {
      "comment": "begin the definition list",
      "begin": "(?=(struct|s?enum|union|service|const|typedef|exception)\\b)",
      "end": "(?x)$.^ # this regex should never end",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "name": "meta.const.frugal",
          "begin": "(?<!\\S)(const)(?!\\S)(?:\\s+(?<ft>map\\s*<\\s*\\g<ft>\\s*,\\s*\\g<ft>\\s*>|set\\s*<\\s*\\g<ft>\\s*>|list\\s*<\\s*\\g<ft>\\s*>\\s*cpp_type|[a-zA-Z_][\\w.]*)(?:\\s+([a-zA-Z_][\\w.]*)(?:\\s*=)?)?)?",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.const.frugal"
            },
            "2": {
              "name": "storage.type.const.frugal"
            },
            "3": {
              "name": "variable.other.const.frugal"
            }
          },
          "end": "[,;]|$|^",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#value"
            }
          ]
        },
        {
          "name": "meta.typedef.frugal",
          "begin": "(?<!\\S)(typedef)(?!\\S)(?:\\s+(?<ft>map\\s*<\\s*\\g<ft>\\s*,\\s*\\g<ft>\\s*>|set\\s*<\\s*\\g<ft>\\s*>|list\\s*<\\s*\\g<ft>\\s*>\\s*cpp_type|[a-zA-Z_][\\w.]*)(?:\\s+([a-zA-Z_][\\w.]*))?)?",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.typedef.frugal"
            },
            "2": {
              "name": "storage.type.typedef.frugal"
            },
            "3": {
              "name": "variable.other.typedef.frugal"
            }
          },
          "end": "$|^",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        {
          "name": "meta.union.frugal",
          "begin": "(?<!\\S)(union)(?!\\S)(?:\\s+([a-zA-Z_][\\w.]*)\\s*(?![^\\s{]))?",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.union.frugal"
            },
            "2": {
              "name": "entity.name.type.union.frugal"
            }
          },
          "end": "(?<=\\})",
          "patterns": [
            {
              "name": "keyword.other.xsd-all.frugal",
              "match": "(?<!\\S)xsd_all(?!\\S)"
            },
            {
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.union.begin.frugal"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.union.end.frugal"
                }
              },
              "patterns": [
                {
                  "include": "#comments"
                },
                {
                  "include": "#field"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.enum.frugal",
          "begin": "(?<!\\S)(enum)(?!\\S)(?:\\s+([a-zA-Z_][\\w.]*)\\s*(?![^\\s{]))?",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.enum.frugal"
            },
            "2": {
              "name": "entity.name.type.enum.frugal"
            }
          },
          "end": "(?<=\\})",
          "patterns": [
            {
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.enum.begin.frugal"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.enum.end.frugal"
                }
              },
              "patterns": [
                {
                  "match": "(?<!\\S)([a-zA-Z_][\\w.]*)(?:\\s*=\\s*(\\d*))?(?:\\s*[,;])?",
                  "captures": {
                    "1": {
                      "name": "variable.other.enum.frugal"
                    },
                    "2": {
                      "name": "constant.numeric.integer.frugal"
                    }
                  }
                },
                {
                  "include": "#comments"
                },
                {
                  "name": "invalid.illegal.frugal",
                  "match": "\\S"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.senum.frugal",
          "begin": "(?<!\\S)(senum)(?!\\S)(?:\\s+([a-zA-Z_][\\w.]*)\\s*(?![^\\s{]))?",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.senum.frugal"
            },
            "2": {
              "name": "entity.name.type.senum.frugal"
            }
          },
          "end": "(?<=\\})|$",
          "patterns": [
            {
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.senum.begin.frugal"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.senum.end.frugal"
                }
              },
              "patterns": [
                {
                  "match": "(?<!\\S)([a-zA-Z_][\\w.]*)(?:\\s*[,;])?",
                  "captures": {
                    "1": {
                      "name": "variable.other.senum.frugal"
                    }
                  }
                },
                {
                  "include": "#comments"
                },
                {
                  "name": "invalid.illegal.frugal",
                  "match": "\\S"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.struct.frugal",
          "begin": "(?<!\\S)(struct)(?!\\S)(?:\\s+([a-zA-Z_][\\w.]*)\\s*(?![^\\s{]))?",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.struct.frugal"
            },
            "2": {
              "name": "entity.name.type.struct.frugal"
            }
          },
          "end": "(?<=\\})",
          "patterns": [
            {
              "name": "keyword.other.xsd-all.frugal",
              "match": "(?<!\\S)xsd_all(?!\\S)"
            },
            {
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.struct.begin.frugal"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.struct.end.frugal"
                }
              },
              "patterns": [
                {
                  "include": "#comments"
                },
                {
                  "include": "#field"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.exception.frugal",
          "begin": "(?<!\\S)(exception)(?!\\S)(?:\\s+([a-zA-Z_][\\w.]*)\\s*(?![^\\s{]))?",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.exception.frugal"
            },
            "2": {
              "name": "entity.name.type.exception.frugal"
            }
          },
          "end": "(?<=\\})",
          "patterns": [
            {
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.exception.begin.frugal"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.exception.end.frugal"
                }
              },
              "patterns": [
                {
                  "include": "#comments"
                },
                {
                  "include": "#field"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.service.frugal",
          "begin": "(?<!\\S)(service)(?!\\S)(?:\\s+([a-zA-z_][\\w.]*)(?:\\s+(extends)(?:\\s+([a-zA-Z_][\\w.]*))?)?\\s*(?![^\\s{]))?",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.service.frugal"
            },
            "2": {
              "name": "entity.name.type.service.frugal"
            },
            "3": {
              "name": "keyword.other.service.extends.frugal"
            },
            "4": {
              "name": "entity.other.inherited-class.frugal"
            }
          },
          "end": "(?<=\\})",
          "patterns": [
            {
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.service.begin.frugal"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.service.end.frugal"
                }
              },
              "patterns": [
                {
                  "include": "#comments"
                },
                {
                  "name": "meta.service.function.frugal",
                  "begin": "(?x)(?<!\\S)(async(?!\\S))?\\s*(?<ft>map\\s*<\\s*\\g<ft>\\s*,\\s*\\g<ft>\\s*> |set\\s*<\\s*\\g<ft>\\s*> |list\\s*<\\s*\\g<ft>\\s*>\\s*(cpp_type(?!\\S))? |(?!async\\b)[a-zA-Z_][\\w.]*)\\s*(?:(?<!\\S)([a-zA-Z_][\\w.]*)\\s*(?![^\\s(]))?",
                  "beginCaptures": {
                    "1": {
                      "name": "keyword.other.async.frugal"
                    },
                    "2": {
                      "name": "storage.type.function.frugal"
                    },
                    "3": {
                      "name": "keyword.other.cpp_type.frugal"
                    },
                    "4": {
                      "name": "entity.name.function.frugal"
                    }
                  },
                  "end": "$|^",
                  "patterns": [
                    {
                      "begin": "\\(",
                      "beginCaptures": {
                        "0": {
                          "name": "punctuation.definition.arguments.begin.frugal"
                        }
                      },
                      "end": "\\)",
                      "endCaptures": {
                        "0": {
                          "name": "punctuation.definition.arguments.end.frugal"
                        }
                      },
                      "patterns": [
                        {
                          "include": "#comments"
                        },
                        {
                          "include": "#field"
                        }
                      ]
                    },
                    {
                      "begin": "(?<![^\\s)])(throws)(?![^\\s(])",
                      "beginCaptures": {
                        "1": {
                          "name": "keyword.other.service.function.throws.frugal"
                        }
                      },
                      "end": "$",
                      "patterns": [
                        {
                          "begin": "\\(",
                          "beginCaptures": {
                            "0": {
                              "name": "punctuation.definition.arguments.begin.frugal"
                            }
                          },
                          "end": "\\)",
                          "endCaptures": {
                            "0": {
                              "name": "punctuation.definition.arguments.end.frugal"
                            }
                          },
                          "patterns": [
                            {
                              "include": "#comments"
                            },
                            {
                              "include": "#field"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "include": "#comments"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "begin": "(^[ \\t]+)?(?=#)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.frugal"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "name": "comment.line.number-sign.frugal",
              "begin": "#",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.frugal"
                }
              },
              "end": "$"
            }
          ]
        },
        {
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.frugal"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "name": "comment.line.double-slash.frugal",
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.frugal"
                }
              },
              "end": "$"
            }
          ]
        },
        {
          "name": "comment.block.documentation.frugal",
          "begin": "/\\*\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.frugal"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.frugal"
            }
          }
        },
        {
          "name": "comment.block.frugal",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.frugal"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.frugal"
            }
          }
        }
      ]
    },
    "field": {
      "name": "meta.field.frugal",
      "begin": "(?x)(?<![^\\s{(])(?=\\S)(\\d+\\s*:)?[ \\t]*(?:(required|optional)(?!\\S)[ \\t]*|(?=\\S)(?!=required|optional|\\d))",
      "beginCaptures": {
        "1": {
          "name": "entity.other.field-id.frugal"
        },
        "2": {
          "name": "keyword.other.requiredness.frugal"
        }
      },
      "end": "[,;]|(?=[)#]|//)|$",
      "endCaptures": {
        "0": {
          "name": "punctuation.separator.fields.frugal"
        }
      },
      "patterns": [
        {
          "begin": "(?x)(?<ft>map\\s*<\\s*\\g<ft>\\s*,\\s*\\g<ft>\\s*> |set\\s*<\\s*\\g<ft>\\s*> |list\\s*<\\s*\\g<ft>\\s*>\\s*(cpp_type(?!\\S))? |[a-zA-Z_][\\w.]*)[ \\t]*(?:([a-zA-Z_][\\w.]*)[ \\t]*)? # identifier",
          "beginCaptures": {
            "1": {
              "name": "storage.type.field.frugal"
            },
            "2": {
              "name": "keyword.other.cpp-type.frugal"
            },
            "3": {
              "name": "variable.other.field-name.frugal"
            }
          },
          "end": "(?=[,;]|[)#]|//)|$",
          "patterns": [
            {
              "begin": "=",
              "end": "(?=[,;]|[)#]|//)|$",
              "patterns": [
                {
                  "name": "keyword.other.xsd_optional.frugal",
                  "match": "(?<!\\S)(xsd_optional)\\b"
                },
                {
                  "name": "keyword.other.xsd_nillable.frugal",
                  "match": "(?<!\\S)(xsd_nillable)\\b"
                },
                {
                  "include": "#value"
                }
              ]
            }
          ]
        }
      ]
    },
    "value": {
      "patterns": [
        {
          "name": "constant.numeric.float.frugal",
          "match": "[+-]?\\d*\\.\\d+([eE][+-]?\\d+)?"
        },
        {
          "name": "constant.numeric.integer.frugal",
          "match": "[+-]?\\d+"
        },
        {
          "name": "constant.other.const-data.frugal",
          "match": "[a-zA-Z_][\\w.]*"
        },
        {
          "name": "string.quoted.single.frugal",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.frugal"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.frugal"
            }
          }
        },
        {
          "name": "string.quoted.double.frugal",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.frugal"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.frugal"
            }
          }
        },
        {
          "name": "meta.array.frugal",
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.array.begin.frugal"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.array.end.frugal"
            }
          },
          "patterns": [
            {
              "match": "[,;]"
            },
            {
              "include": "#value"
            }
          ]
        },
        {
          "name": "meta.map.frugal",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.map.begin.frugal"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.map.end.frugal"
            }
          },
          "patterns": [
            {
              "match": "[:,;]"
            },
            {
              "include": "#value"
            }
          ]
        },
        {
          "name": "invalid.illegal.frugal",
          "match": "\\S"
        }
      ]
    }
  }
}
